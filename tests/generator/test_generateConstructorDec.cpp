#include <gtest/gtest.h>
#include "SpecialMemberGenerator.h"
#include "ClassModels.h"
#include "PropertiesModels.h"
#include "PropertiesGenerator.h"
#include <stdexcept>
#include <vector>

TEST(SpecialMemberGeneratorDeclarationTest, CustomConstructorWithParameters) {
    // Arrange: Create a custom constructor with a non-empty parameter list.
    std::string className = "MyClass";
    // Correctly construct parameters using DataType and Parameter constructors.
    std::vector<PropertiesModels::Parameter> params = {
        PropertiesModels::Parameter(
            PropertiesModels::DataType(PropertiesModels::Types::INT), "x"),
        PropertiesModels::Parameter(
            PropertiesModels::DataType(PropertiesModels::Types::FLOAT), "y")
    };
    // Create a custom constructor model with the above parameters.
    ClassModels::Constructor ctor(ClassModels::ConstructorType::CUSTOM, params, "Custom constructor");

    // Act: Generate the constructor declaration.
    std::string declaration = SpecialMemberGenerator::generateConstructorDeclaration(className, ctor);

    // Assert: Expect the declaration to contain the class name and the parameter list
    // as generated by the PropertiesGenerator.
    std::string expected = "    MyClass(" + PropertiesGenerator::generateParameterList(params) + ");\n";
    EXPECT_EQ(declaration, expected);
}

TEST(SpecialMemberGeneratorDeclarationTest, CustomConstructorWithEmptyParameterList) {
    // Arrange: Create a custom constructor with an empty parameter list.
    std::string className = "MyClass";
    std::vector<PropertiesModels::Parameter> emptyParams; // No parameters provided.
    ClassModels::Constructor ctor(ClassModels::ConstructorType::CUSTOM, emptyParams, "Custom constructor");

    // Act: Generate the constructor declaration.
    std::string declaration = SpecialMemberGenerator::generateConstructorDeclaration(className, ctor);

    // Assert: When no parameters are provided, the generated declaration should reflect an empty parameter list.
    // Here, we assume that PropertiesGenerator::generateParameterList returns an empty string when given an empty vector.
    std::string expected = "    MyClass(" + PropertiesGenerator::generateParameterList(emptyParams) + ");\n";
    EXPECT_EQ(declaration, expected);
}

TEST(SpecialMemberGeneratorDeclarationTest, CopyConstructorDeclaration) {
    // Arrange: Create a copy constructor model. Parameters are not used for copy constructors.
    std::string className = "MyClass";
    ClassModels::Constructor ctor(ClassModels::ConstructorType::COPY, {}, "Copy constructor");

    // Act: Generate the copy constructor declaration.
    std::string declaration = SpecialMemberGenerator::generateConstructorDeclaration(className, ctor);

    // Assert: Verify that the declaration matches the expected copy constructor signature.
    std::string expected = "    MyClass(const MyClass& other);\n";
    EXPECT_EQ(declaration, expected);
}

TEST(SpecialMemberGeneratorDeclarationTest, MoveConstructorDeclaration) {
    // Arrange: Create a move constructor model. Parameters are not used for move constructors.
    std::string className = "MyClass";
    ClassModels::Constructor ctor(ClassModels::ConstructorType::MOVE, {}, "Move constructor");

    // Act: Generate the move constructor declaration.
    std::string declaration = SpecialMemberGenerator::generateConstructorDeclaration(className, ctor);

    // Assert: Verify that the declaration matches the expected move constructor signature.
    std::string expected = "    MyClass(MyClass&& other) noexcept;\n";
    EXPECT_EQ(declaration, expected);
}

TEST(SpecialMemberGeneratorDeclarationTest, DefaultConstructorDeclaration) {
    // Arrange: Create a default constructor model.
    std::string className = "MyClass";
    // For default constructors, parameters are ignored.
    ClassModels::Constructor ctor(ClassModels::ConstructorType::DEFAULT, {}, "Default constructor");

    // Act: Generate the default constructor declaration.
    std::string declaration = SpecialMemberGenerator::generateConstructorDeclaration(className, ctor);

    // Assert: The generated declaration should include default constructor along with
    // the default copy and move constructors, as specified.
    std::string expected = "    MyClass() = default;\n"
                           "    MyClass(const MyClass&) = default;\n"
                           "    MyClass(MyClass&&) = default;\n";
    EXPECT_EQ(declaration, expected);
}

TEST(SpecialMemberGeneratorDeclarationTest, ThrowsOnUnknownConstructorType) {
    // Arrange: Create a constructor model with an invalid type (cast an out-of-range integer).
    std::string className = "MyClass";
    ClassModels::Constructor invalidCtor(static_cast<ClassModels::ConstructorType>(999), {}, "Invalid constructor");

    // Act & Assert: The generator should throw a runtime_error for an unrecognised constructor type.
    EXPECT_THROW(
        SpecialMemberGenerator::generateConstructorDeclaration(className, invalidCtor),
        std::runtime_error
    );
}
